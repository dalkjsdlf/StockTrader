openapi: 3.0.0
info:
  title: Stock Trading API
  description: 주식매매 프로그램의 종목정보 API 명세서
  version: 1.0.0
servers:
- url: /
tags:
- name: StockItem
  description: 종목정보 API
- name: Member
  description: 사용자 API
- name: Account
  description: 계좌 API
- name: Order
  description: 주문 API
paths:
  /api/v1/members:
    get:
      tags:
      - Member
      summary: 사용자 목록 조회
      description: 모든 사용자 목록을 조회합니다.
      operationId: getAllMembers
      responses:
        "200":
          description: 조회 성공 (사용자 목록 반환)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Member"
        "400":
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
        "401":
          description: 인증 실패 (로그인이 필요함)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "403":
          description: 권한 부족 (관리자만 접근 가능)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "404":
          description: 사용자를 찾을 수 없음 (등록된 사용자가 없음)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
        "429":
          description: 요청 과다 (Rate Limit 초과)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: 서비스 불가 (서버 과부하 또는 DB 연결 오류)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
      - Member
      summary: 새로운 사용자 등록
      description: 새로운 사용자를 등록합니다.
      operationId: createMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberCreateRequest"
        required: true
      responses:
        "201":
          description: 사용자 등록 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "400":
          description: 입력값 오류 또는 중복된 정보 (ID, 이메일, 전화번호)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
                DuplicatedUserId:
                  $ref: "#/components/examples/DuplicatedUserId"
                DuplicatedEmail:
                  $ref: "#/components/examples/DuplicatedEmail"
  /api/v1/members/{member_id}:
    get:
      tags:
      - Member
      summary: 사용자 상세 조회
      description: 사용자 ID를 이용하여 특정 사용자의 정보를 조회합니다.
      operationId: getMemberById
      parameters:
      - name: id
        in: path
        description: 사용자 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: 조회 성공 (사용자 정보 반환)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "400":
          description: 입력값 오류 (ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 존재하지 않는 사용자 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
    delete:
      tags:
      - Member
      summary: 사용자 삭제
      description: 사용자를 삭제합니다.
      operationId: deleteMember
      parameters:
      - name: id
        in: path
        description: 삭제할 사용자 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: 삭제 성공 (응답 바디 없음)
        "400":
          description: 입력값 오류 (ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 존재하지 않는 사용자 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
    patch:
      tags:
      - Member
      summary: 사용자 정보 수정
      description: 사용자의 정보를 수정합니다.
      operationId: updateMember
      parameters:
      - name: id
        in: path
        description: 사용자 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberUpdateRequest"
        required: true
      responses:
        "200":
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "400":
          description: 입력값 오류 또는 중복된 정보 (ID, 이메일, 전화번호)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
                DuplicatedUserId:
                  $ref: "#/components/examples/DuplicatedUserId"
                DuplicatedEmail:
                  $ref: "#/components/examples/DuplicatedEmail"
        "404":
          description: 존재하지 않는 사용자 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
  /api/v1/accounts:
    get:
      tags:
      - Account
      summary: 계좌 목록 조회
      description: 사용자의 모든 계좌를 조회합니다.
      operationId: getAllAccounts
      parameters:
      - name: user_id
        in: header
        description: 사용자 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: 조회 성공 (사용자의 모든 계좌 반환)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: 입력값 오류 (사용자ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "401":
          description: 인증 실패 (로그인이 필요함)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "403":
          description: 권한 부족 (로그인된 사용자만 접근 가능)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "500":
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/accounts/{account_id}:
    get:
      tags:
      - Account
      summary: 계좌 상세 조회
      description: 계좌 ID를 이용하여 특정 계좌 정보를 조회합니다.
      operationId: getAccountById
      parameters:
      - name: id
        in: path
        description: 계좌 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: 조회 성공 (계좌 정보 반환)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: 입력값 오류 (계좌ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 존재하지 않는 계좌 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                AccountNotFound:
                  $ref: "#/components/examples/AccountNotFound"
  /api/v1/accounts/{account_id}/stocks:
    get:
      tags:
      - Account
      summary: 보유 종목 조회
      description: 계좌 ID를 이용하여 사용자가 보유한 주식 목록을 조회합니다.
      operationId: getStocksByAccountId
      parameters:
      - name: id
        in: path
        description: 계좌 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: 조회 성공 (보유 종목 목록 반환)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountStock"
        "400":
          description: 입력값 오류 (계좌ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                INVALID_ACCOUNT_ID:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 존재하지 않는 계좌 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                AccountNotFound:
                  $ref: "#/components/examples/AccountNotFound"
  /api/v1/accounts/{account_id}/withdraw:
    patch:
      tags:
      - Account
      summary: 계좌 잔고 차감
      description: 계좌에서 특정 금액을 차감합니다.
      operationId: withdrawFromAccount
      parameters:
      - name: id
        in: path
        description: 계좌 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdWithdrawBody"
        required: true
      responses:
        "200":
          description: 잔고 차감 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InlineResponse200"
        "400":
          description: 입력값 오류 (계좌ID 또는 차감금액이 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
                InvalidAmountType:
                  $ref: "#/components/examples/InvalidAmountType"
        "404":
          description: 존재하지 않는 계좌 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ITEM_NOT_FOUND:
                  $ref: "#/components/examples/AccountNotFound"
        "422":
          description: 잔고 부족
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InsufficientFunds:
                  $ref: "#/components/examples/InsufficientFunds"
  /api/v1/accounts/{account_id}/deposit:
    patch:
      tags:
      - Account
      summary: 계좌 잔고 증가
      description: 계좌에 특정 금액을 추가합니다.
      operationId: depositToAccount
      parameters:
      - name: id
        in: path
        description: 계좌 ID (숫자)
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDepositBody"
        required: true
      responses:
        "200":
          description: 잔고 증가 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InlineResponse200"
        "400":
          description: 입력값 오류 (계좌ID 또는 증가금액이 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
                InvalidAmountType:
                  $ref: "#/components/examples/InvalidAmountType"
        "404":
          description: 존재하지 않는 계좌 ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                AccountNotFound:
                  $ref: "#/components/examples/AccountNotFound"
  /api/v1/stockItems:
    get:
      tags:
        - StockItem
      summary: 종목정보 다건 조회
      description: 모든 종목 정보를 조회합니다. 기본 정렬 기준은 종목 코드(item_code) 오름차순입니다.
      operationId: getAllItems
      parameters:
        - name: sort
          in: query
          description: "정렬 기준 (기본값: item_code)"
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - item_code
              - item_name
              - market
        - name: order
          in: query
          description: "정렬 방향 (asc: 오름차순, desc: 내림차순, 기본값: asc)"
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: "조회 성공 (기본 정렬: item_code 오름차순)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
    post:
      tags:
        - StockItem
      summary: 새 종목 등록
      description: 새로운 종목을 등록합니다.
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
        required: true
      responses:
        "201":
          description: 등록 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: 잘못된 입력값
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidItemCode:
                  $ref: "#/components/examples/InvalidItemCode"
                InvalidItemName:
                  $ref: "#/components/examples/InvalidItemName"
                InvalidMarket:
                  $ref: "#/components/examples/InvalidMarket"
                InvalidTheme:
                  $ref: "#/components/examples/InvalidTheme"
  /api/v1/stockItems/{item_id}:
    get:
      tags:
        - StockItem
      summary: 종목 단건 조회
      description: 종목 ID를 이용하여 특정 종목을 조회합니다. ID는 숫자여야 합니다.
      operationId: getItemById
      parameters:
        - name: id
          in: path
          description: 조회할 종목 ID (숫자만 허용)
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: 잘못된 요청 (ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 종목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ItemNotFound:
                  $ref: "#/components/examples/ItemNotFound"
  /api/v1/stockItems/search:
    get:
      tags:
        - StockItem
      summary: 종목 검색
      description: "키워드를 기반으로 종목을 검색합니다. 키워드는 최대 100자이며, 특수문자는 허용되지 않습니다."
      operationId: searchItems
      parameters:
        - name: keyword
          in: query
          description: "검색할 키워드 (최대 100자, 특수문자 금지)"
          required: true
          style: form
          explode: true
          schema:
            maxLength: 100
            pattern: "^[a-zA-Z0-9가-힣 ]+$"
            type: string
        - name: sort
          in: query
          description: "정렬 기준 (기본값: item_code)"
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - item_code
              - item_name
              - market
        - name: order
          in: query
          description: "정렬 방향 (asc: 오름차순, desc: 내림차순, 기본값: asc)"
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: "검색 성공 (기본 정렬: item_code 오름차순)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          description: 잘못된 검색 요청 (키워드가 100자 초과 또는 특수문자 포함)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
  /api/v1/stockItems/detail/{item_id}:
    get:
      tags:
        - StockItem
      summary: 종목 상세 조회
      description: 종목 ID를 이용하여 종목 상세 정보를 조회합니다. ID는 숫자여야 합니다.
      operationId: getItemDetailById
      parameters:
        - name: id
          in: path
          description: 조회할 종목 ID (숫자만 허용)
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDetail"
        "400":
          description: 잘못된 요청 (ID가 숫자가 아닐 경우)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidIdFormat:
                  $ref: "#/components/examples/InvalidIdFormat"
        "404":
          description: 종목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ItemNotFound:
                  $ref: "#/components/examples/ItemNotFound"
  /api/v1/order/buy:
    post:
      tags:
        - Order
      summary: 주식 매수 주문
      description: 사용자가 특정 종목을 매수하는 주문을 생성합니다.
      operationId: placeBuyOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
        required: true
      responses:
        "201":
          description: 주문 성공 (ORDER 생성됨)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          description: 입력값 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
        "403":
          description: 인가되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "404":
          description: 존재하지 않는 데이터
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ItemNotFound:
                  $ref: "#/components/examples/ItemNotFound"
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
        "422":
          description: 업무 처리 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InsufficientFunds:
                  $ref: "#/components/examples/InsufficientFunds"
                ExecutionFailed:
                  $ref: "#/components/examples/ExecutionFailed"
  /api/v1/order/sell:
    post:
      tags:
        - Order
      summary: 주식 매도 주문
      description: 사용자가 특정 종목을 매도하는 주문을 생성합니다.
      operationId: placeSellOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
        required: true
      responses:
        "201":
          description: 주문 성공 (ORDER 생성됨)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          description: 입력값 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
        "403":
          description: 인가되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ForbiddenUser:
                  $ref: "#/components/examples/ForbiddenUser"
        "404":
          description: 존재하지 않는 데이터
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                ItemNotFound:
                  $ref: "#/components/examples/ItemNotFound"
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
        "422":
          description: 업무 처리 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InsufficientQuantity:
                  $ref: "#/components/examples/InsufficientQuantity"
                ExecutionFailed:
                  $ref: "#/components/examples/ExecutionFailed"
  /api/v1/order/cancel:
    patch:
      tags:
        - Order
      summary: 주문 취소
      description: 사용자가 특정 주문을 취소합니다.
      operationId: cancelOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCancelBody"
        required: true
      responses:
        "200":
          description: 주문 취소 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "400":
          description: 입력값 오류
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                InvalidInput:
                  $ref: "#/components/examples/InvalidInput"
        "404":
          description: 존재하지 않는 주문
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                OrderNotFound:
                  $ref: "#/components/examples/OrderNotFound"
        "422":
          description: 업무 처리 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                OrderNotCancelable:
                  $ref: "#/components/examples/OrderNotCancelable"
components:
  schemas:
    Member:
      type: object
      properties:
        user_id:
          type: integer
          description: 사용자 ID
          example: 1001
        username:
          type: string
          description: 사용자명
          example: dorris
        email:
          type: string
          description: 이메일
          example: dorris@example.com
        phone:
          type: string
          description: 전화번호
          example: 010-1234-5678
        status:
          type: string
          description: "사용자 상태 (ACTIVE, INACTIVE)"
          example: ACTIVE
        created_at:
          type: string
          description: 생성일
          format: date-time
        updated_at:
          type: string
          description: 수정일
          format: date-time
    MemberCreateRequest:
      type: object
      properties:
        username:
          maxLength: 50
          type: string
          description: 사용자명 (최대 50자)
          example: JohnDoe
        email:
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          type: string
          description: "이메일 (최대 100자, 형식 체크)"
          example: johndoe@example.com
        phone:
          pattern: "^[0-9]{3}-[0-9]{4}-[0-9]{4}$"
          type: string
          description: "전화번호 (형식: 010-1234-5678)"
          example: 010-1234-5678
    MemberUpdateRequest:
      type: object
      properties:
        username:
          maxLength: 50
          type: string
          description: "사용자명 (최대 50자, 선택 입력)"
          example: JohnDoe
        email:
          maxLength: 100
          type: string
          description: "이메일 (최대 100자, 선택 입력)"
          example: johndoe@example.com
        phone:
          type: string
          description: 전화번호 (선택 입력)
          example: 010-5678-1234
    Account:
      type: object
      properties:
        account_id:
          type: integer
          description: 계좌 ID
          example: 101
        account_number:
          type: string
          description: 계좌번호 (000-0000-0000 형식)
          example: 123-4567-8901
        status:
          type: string
          description: "계좌 상태 (ACTIVE, INACTIVE)"
          example: ACTIVE
        opened_at:
          type: string
          description: 계좌 개설일
          format: date-time
        balance:
          type: number
          description: 현재 잔액
          format: float
          example: 500000
        available_balance:
          type: number
          description: 출금 가능 잔액
          format: float
          example: 480000
    AccountStock:
      type: object
      description: 계좌가 보유한 주식 정보를 나타내는 객체
      properties:
        account_id:
          type: integer
          description: 보유 종목이 속한 계좌 ID
          example: 101
        item_id:
          type: integer
          description: 보유 종목의 ID
          example: 202
        item_code:
          type: string
          description: 종목 코드 (6자리, 영문 대문자 및 숫자 조합)
          example: "ABC123"
        purchase_price:
          type: number
          description: 매입 가격 (1주당 단가)
          example: 1500.50
        quantity:
          type: integer
          description: 매입 수량
          example: 10
        available_quantity:
          type: integer
          description: 매도 가능한 가용 수량
          example: 5
        market_price:
          type: number
          description: 현재 시장 가격
          example: 1550.75
        profit_loss_amount:
          type: number
          description: 평가 손익 금액 (시장 가격 기준)
          example: 50.25
        profit_loss_rate:
          type: number
          description: 평가 손익률 (시장 가격 기준, % 단위)
          example: 3.35
        created_at:
          type: string
          format: date-time
          description: 보유 종목 등록 일시
          example: "2024-03-09T12:34:56Z"
        created_by:
          type: string
          description: 보유 종목 최초 등록자
          example: "admin"
        modified_at:
          type: string
          format: date-time
          description: 마지막 수정 일시 (null 가능)
          example: "2024-03-10T08:22:11Z"
        modified_by:
          type: string
          description: 마지막 수정자 (null 가능)
          example: "trader123"
    Item:
      type: object
      properties:
        item_id:
          type: integer
          description: 종목 ID
        item_code:
          maxLength: 6
          minLength: 6
          pattern: "^[A-Z0-9]{6}$"
          type: string
          description: "종목 코드 (6자 고정, 영문 대문자 + 숫자 조합)"
          example: ABC123
        item_name:
          maxLength: 100
          pattern: "^[가-힣A-Za-z0-9 ]{1,100}$"
          type: string
          description: "종목 이름 (최대 100자, 한글 + 영문 대소문자 + 숫자)"
          example: 삼성전자
        market:
          maxLength: 10
          pattern: "^[가-힣A-Z]{1,10}$"
          type: string
          description: "시장 구분 (최대 10자, 한글 + 영문 대문자)"
          example: KOSPI
          enum:
          - KOSPI
          - KOSDAQ
          - KONEX
          - ELW
          - ETF
          - ETN
          - BOND
        theme:
          maxLength: 5
          minLength: 5
          pattern: "^[A-Z0-9]{5}$"
          type: string
          description: "테마 코드 (5자 고정, 영문 대문자 + 숫자 조합)"
          example: IE001
          enum:
          - IE001
          - IE002
          - IE003
          - IE004
          - IE005
          - IE006
          - IE007
          - IE008
          - IE009
          - IE010
          - IE011
          - BH001
          - BH002
          - BH003
          - BH004
          - BH005
          - BH006
          - BH007
          - EE001
          - EE002
          - EE003
          - EE004
          - EE005
          - EE006
          - EE007
          - EC001
          - EC002
          - EC003
          - EC004
          - MC001
          - MC002
          - MC003
          - MC004
    ItemDetail:
      type: object
      properties:
        item_id:
          type: integer
          description: 종목 ID
        item_code:
          maxLength: 6
          minLength: 6
          pattern: "^[A-Z0-9]{6}$"
          type: string
          description: "종목 코드 (6자 고정, 영문 대문자 + 숫자 조합)"
          example: ABC123
        item_name:
          maxLength: 100
          pattern: "^[가-힣A-Za-z0-9 ]{1,100}$"
          type: string
          description: "종목 이름 (최대 100자, 한글 + 영문 대소문자 + 숫자)"
          example: 삼성전자
        market:
          maxLength: 10
          pattern: "^[가-힣A-Z]{1,10}$"
          type: string
          description: "시장 구분 (최대 10자, 한글 + 영문 대문자)"
          example: KOSPI
          enum:
          - KOSPI
          - KOSDAQ
          - KONEX
          - ELW
          - ETF
          - ETN
          - BOND
        theme:
          maxLength: 5
          minLength: 5
          pattern: "^[A-Z0-9]{5}$"
          type: string
          description: "테마 코드 (5자 고정, 영문 대문자 + 숫자 조합)"
          example: IE001
          enum:
          - IE001
          - IE002
          - IE003
          - IE004
          - IE005
          - IE006
          - IE007
          - IE008
          - IE009
          - IE010
          - IE011
          - BH001
          - BH002
          - BH003
          - BH004
          - BH005
          - BH006
          - BH007
          - EE001
          - EE002
          - EE003
          - EE004
          - EE005
          - EE006
          - EE007
          - EC001
          - EC002
          - EC003
          - EC004
          - MC001
          - MC002
          - MC003
          - MC004
        price:
          type: number
          description: 시장가
          format: float
    OrderRequest:
      type: object
      properties:
        item_id:
          type: integer
          description: 종목 ID
          example: 101
        quantity:
          type: integer
          description: 주문 수량
          example: 10
        price:
          type: number
          description: 주문 가격
          format: float
          example: 1500
        user_id:
          type: integer
          description: 사용자 ID
          example: 1001
        account_id:
          pattern: "^[0-9]{3}-[0-9]{4}-[0-9]{4}$"
          type: string
          description: "계좌 ID (형식: 000-0000-0000)"
          example: 123-4567-8901
    OrderResponse:
      type: object
      properties:
        order_id:
          type: integer
          description: 생성된 주문 ID
          example: 123
        status:
          type: string
          description: "주문 상태 (NEW, EXECUTED, CANCELLED)"
          example: NEW
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 에러 유형
        message:
          type: string
          description: 에러 상세 메시지
    IdWithdrawBody:
      type: object
      properties:
        amount:
          type: number
          description: 차감할 금액
          format: float
          example: 10000
    InlineResponse200:
      type: object
      properties:
        success:
          type: boolean
          example: true
    IdDepositBody:
      type: object
      properties:
        amount:
          type: number
          description: 증가할 금액
          format: float
          example: 50000
    OrderCancelBody:
      type: object
      properties:
        order_id:
          type: integer
          description: 취소할 주문 ID
          example: 123
  examples:
    InvalidInput:
      summary: 잘못된 입력값
      value:
        error: Bad Request
        message: 입력값이 올바르지 않습니다.
        error_data:
          field: account_id
          reason: 숫자여야 합니다.

    DuplicatedUserId:
      summary: 중복된 사용자 ID
      value:
        error: Bad Request
        message: 이미 존재하는 사용자ID입니다.
        error_data:
          userId: 20

    DuplicatedEmail:
      summary: 중복된 이메일
      value:
        error: Bad Request
        message: 이미 존재하는 이메일입니다.
        error_data:
          email: dorris@example.com

    AccountNotFound:
      summary: 존재하지 않는 계좌
      value:
        error: Not Found
        message: 해당 계좌 ID가 존재하지 않습니다.
        error_data:
          accountId: 9999

    InvalidAmountType:
      summary: 잘못된 금액 형식
      value:
        error: Bad Reqeust
        message: 금액은 숫자 형식이어야 합니다.
        error_data:
          amount: "alotofmoney"

    InvalidItemCode:
      summary: 종목 코드가 6자가 아닌 경우
      value:
        error: Bad Request
        message: Invalid item_code. It must be exactly 6 characters long and contain only uppercase letters and numbers.
        error_data:
          itemCode: AB12

    InvalidItemName:
      summary: 종목명이 100자를 초과한 경우
      value:
        error: Bad Request
        message: Invalid item_name. It must be 100 characters or less and contain only Korean, English letters, and numbers.
        error_data:
          itemName: 삼성전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자전자

    InvalidMarket:
      summary: 시장 구분 오류
      value:
        error: Bad Request
        message: Invalid market. It must be 10 characters or less and contain only Korean or uppercase English letters.
        error_data:
          market: nasdaq100@

    InvalidTheme:
      summary: 테마 코드가 5자가 아닌 경우
      value:
        error: Bad Request
        message: Invalid theme. It must be exactly 5 characters long and contain only uppercase letters and numbers.
        error_data:
          theme: EE0062

    InvalidIdFormat:
      summary: 잘못된 ID 형식
      value:
        error: Bad Request
        message: Invalid ID format. ID must be a number.
        error_data:
          id: abc

    ItemNotFound:
      summary: 존재하지 않는 종목
      value:
        error: Not Found
        message: 해당 종목ID가 존재하지 않습니다.
        error_data:
          itemId: 98765

    UserNotFound:
      summary: 존재하지 않는 사용자
      value:
        error: Not Found
        message: 해당 사용자ID가 존재하지 않습니다.
        error_data:
          userId: 10000

    InsufficientFunds:
      summary: 잔고 부족
      value:
        error: Unprocessable Entity
        message: 계좌 잔액이 부족합니다.
        error_data:
          required: 100000
          available: 50000

    ExecutionFailed:
      summary: 주문 체결 실패
      value:
        error: Unprocessable Entity
        message: 주문 체결에 실패했습니다.
        error_data:
          itemId: 12345
          reason: 호가 미체결

    InsufficientQuantity:
      summary: 보유 주식 부족
      value:
        error: Unprocessable Entity
        message: 보유 주식 수량이 부족합니다.
        error_data:
          owned: 3
          requested: 10

    OrderNotFound:
      summary: 존재하지 않는 주문
      value:
        error: Not Found
        message: 해당 주문ID가 존재하지 않습니다.
        error_data:
          orderId: 9999

    OrderNotCancelable:
      summary: 주문 취소 불가
      value:
        error: Unprocessable Entity
        message: 주문이 이미 체결되었거나 취소할 수 없는 상태입니다.
        error_data:
          orderId: 8888
          status: EXECUTED

    ForbiddenUser:
      summary: 인가되지 않은 사용자
      value:
        error: Forbidden
        message: 해당 사용자에게 매수 권한이 없습니다.
        error_data:
          userId: 7777

